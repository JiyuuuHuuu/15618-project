__device__
void upshoot0(uchar4 &pixel_color, const float t, const float center_dist, const particle &curr, tail &curr_tail) {
  // red upshoot
  if (center_dist <= curr.r * 0.1) {
    pixel_color.x = 255;
    pixel_color.y = 255;
    pixel_color.z = 255;
    pixel_color.w = 255;
    curr_tail.color = curr.tail;
    curr_tail.t_0 = t + curr.t_0;
  } else {
    pixel_color.x = 255 - clip((center_dist/curr.r - 0.15f)*255.0f);
    pixel_color.y = 0;
    pixel_color.z = 0;
    pixel_color.w = 255;
  }
}

__device__
void upshoots(uchar4 &pixel_color, const float t, int offset, const particle &curr, const float2 &pixel_pos, tail &curr_tail) {
  float2 p = currP(curr.p_0, curr.v_0, curr.a, t - curr.t_0);
  float center_dist = getDistance(pixel_pos, p);
  if (center_dist > curr.r || curr.t_0 > t) {return;}
  uchar4 temp;
  switch (curr.color) {
    case 0:
      upshoot0(temp, t - curr.t_0, center_dist, curr, curr_tail);
      break;
    default:
      upshoot0(temp, t - curr.t_0, center_dist, curr, curr_tail);
  }
  pixel_color.x = clip((int)pixel_color.x + (int)temp.x); 
  pixel_color.y = clip((int)pixel_color.y + (int)temp.y); 
  pixel_color.z = clip((int)pixel_color.z + (int)temp.z); 
  pixel_color.w = clip((int)pixel_color.w + (int)temp.w); 
}


/*Single color*/
__device__
void color0(uchar4 &pixel_color, const float t) {
  // t: should be global t - t_0
  // decaying red
  pixel_color.w = 255;
  pixel_color.x = 255 - clip(10.2f*t*t);
  pixel_color.y = 255 - clip(t*204.0f);
  pixel_color.z = 255 - clip(t*204.0f);
}

__device__
void color1(uchar4 &pixel_color, const float t) {
  // t: should be global t - t_0
  // decaying green
  pixel_color.w = 255;
  pixel_color.x = 255 - clip(t*204.0f);
  pixel_color.y = 255 - clip(10.2f*t*t);
  pixel_color.z = 255 - clip(t*204.0f);
}

__device__
void color2(uchar4 &pixel_color, const float t) {
  // t: should be global t - t_0
  // decaying yellow
  pixel_color.w = 255;
  pixel_color.x = 255 - clip(t*204.0f);
  pixel_color.y = 255 - clip(t*204.0f);
  pixel_color.z = 255 - clip(10.2f*t*t);
}

__device__
void color3(uchar4 &pixel_color, const float t) {
  // t: should be global t - t_0
  // decaying yellow
  pixel_color.w = 255;
  pixel_color.x = 255 - clip(10.2f*t*t);
  pixel_color.y = 255 - clip(10.2f*t*t);
  pixel_color.z = 255 - clip(t*204.0f);
}

/*blinking color*/
__device__
void color20(uchar4 &pixel_color, const float t, const int offset) {
  // t: should be global t - t_0
  // blinking red
  unsigned int seed = (unsigned int)(t*100) + (unsigned int)offset;
  float b_factor = random_float(255.0f, 0.0f, seed);
  pixel_color.w = 255;
  pixel_color.x = 255 - (unsigned char)b_factor;
  pixel_color.y = 255 - clip(t*204.0f) - (unsigned char)b_factor;
  pixel_color.z = 255 - clip(t*204.0f) - (unsigned char)b_factor;
}

__device__
void color21(uchar4 &pixel_color, const float t, const int offset) {
  // t: should be global t - t_0
  // blinking green
  unsigned int seed = (unsigned int)(t*100) + (unsigned int)offset;
  float b_factor = random_float(255.0f, 0.0f, seed);
  pixel_color.w = 255;
  pixel_color.x = 255 - clip(t*204.0f) - (unsigned char)b_factor;
  pixel_color.y = 255 - (unsigned char)b_factor;
  pixel_color.z = 255 - clip(t*204.0f) - (unsigned char)b_factor;
}

__device__
void color22(uchar4 &pixel_color, const float t, const int offset) {
  // t: should be global t - t_0
  // blinking blue
  unsigned int seed = (unsigned int)(t*100) + (unsigned int)offset;
  float b_factor = random_float(255.0f, 0.0f, seed);
  pixel_color.w = 255;
  pixel_color.x = 255 - clip(t*204.0f) - (unsigned char)b_factor;
  pixel_color.y = 255 - clip(t*204.0f) - (unsigned char)b_factor;
  pixel_color.z = 255 - (unsigned char)b_factor;
}

__device__
void color23(uchar4 &pixel_color, const float t, const int offset) {
  // t: should be global t - t_0
  // blinking yellow
  unsigned int seed = (unsigned int)(t*100) + (unsigned int)offset;
  float b_factor = random_float(255.0f, 0.0f, seed);
  pixel_color.w = 255;
  pixel_color.x = 255 - (unsigned char)b_factor;
  pixel_color.y = 255 - (unsigned char)b_factor;
  pixel_color.z = 255 - clip(t*204.0f) - (unsigned char)b_factor;
}

/*Color w tails*/
__device__
void color40(uchar4 &pixel_color, const float t, const int offset, tail &curr_tail, const particle &curr) {
  // t: should be global t - t_0
  // red with tails
  pixel_color.w = 255;
  pixel_color.x = 255 - clip(10.2f*t*t - 20.4f);
  pixel_color.y = 255 - clip(t*104.0f);
  pixel_color.z = 255 - clip(t*104.0f);
  curr_tail.color = 1;
  curr_tail.t_0 = 0.7f*t + curr.t_0;
}

__device__
void color41(uchar4 &pixel_color, const float t, const int offset, tail &curr_tail, const particle &curr) {
  // t: should be global t - t_0
  // green with tails
  pixel_color.w = 255;
  pixel_color.x = 255 - clip(t*104.0f);
  pixel_color.y = 255 - clip(10.2f*t*t - 20.4f);
  pixel_color.z = 255 - clip(t*104.0f);
  curr_tail.color = 2;
  curr_tail.t_0 = 0.7f*t + curr.t_0;
}

__device__
void color42(uchar4 &pixel_color, const float t, const int offset, tail &curr_tail, const particle &curr) {
  // t: should be global t - t_0
  // blue with tails
  pixel_color.w = 255;
  pixel_color.x = 255 - clip(t*104.0f);
  pixel_color.y = 255 - clip(t*104.0f);
  pixel_color.z = 255 - clip(10.2f*t*t - 20.4f);
  curr_tail.color = 3;
  curr_tail.t_0 = 0.7f*t + curr.t_0;
}

__device__
void color43(uchar4 &pixel_color, const float t, const int offset, tail &curr_tail, const particle &curr) {
  // t: should be global t - t_0
  // yellow with tails
  pixel_color.w = 255;
  pixel_color.x = 255 - clip(10.2f*t*t - 20.4f);
  pixel_color.y = 255 - clip(10.2f*t*t - 20.4f);
  pixel_color.z = 255 - clip(t*104.0f);
  curr_tail.color = 4;
  curr_tail.t_0 = 0.7f*t + curr.t_0;
}

// need to register patterns in this function
__device__
void colors(uchar4 &pixel_color, const float t, int offset, const particle &curr, const float2 &pixel_pos, tail &curr_tail) {
  float2 p = currP(curr.p_0, curr.v_0, curr.a, t - curr.t_0);
  float center_dist = getDistance(pixel_pos, p);
  if (!isWithinDistance(p, pixel_pos, curr.r)) {return;}
  uchar4 temp;
  switch (curr.color) {
    case 0:
      color0(temp, t - curr.t_0);
      break;
    case 1:
      color1(temp, t - curr.t_0);
      break;
    case 2:
      color2(temp, t - curr.t_0);
      break;
    case 3:
      color3(temp, t - curr.t_0);
      break;
    case 20:
      color20(temp, t - curr.t_0, offset);
      break;
    case 21:
      color21(temp, t - curr.t_0, offset);
      break;
    case 22:
      color22(temp, t - curr.t_0, offset);
      break;
    case 23:
      color23(temp, t - curr.t_0, offset);
      break;
    case 40:
      color40(temp, t - curr.t_0, offset, curr_tail, curr);
      break;
    case 41:
      color41(temp, t - curr.t_0, offset, curr_tail, curr);
      break;
    case 42:
      color42(temp, t - curr.t_0, offset, curr_tail, curr);
      break;
    case 43:
      color43(temp, t - curr.t_0, offset, curr_tail, curr);
      break;
    case 200:
      upshoot0(temp, t - curr.t_0, center_dist, curr, curr_tail);
      break;
    default:
      color0(temp, t - curr.t_0);
  }
  pixel_color.x = clip((int)pixel_color.x + (int)temp.x); 
  pixel_color.y = clip((int)pixel_color.y + (int)temp.y); 
  pixel_color.z = clip((int)pixel_color.z + (int)temp.z); 
  pixel_color.w = clip((int)pixel_color.w + (int)temp.w); 
}

__device__
void tail1(uchar4 &pixel_color, const float t) {
  // red tail
  pixel_color.x = 255 - clip(30.2f*t*t);
  pixel_color.y = 255 - clip(t*104.0f);
  pixel_color.z = 255 - clip(t*104.0f);
  pixel_color.w = 255;
}

__device__
void tail2(uchar4 &pixel_color, const float t) {
  // green tail
  pixel_color.x = 255 - clip(t*104.0f);
  pixel_color.y = 255 - clip(30.2f*t*t);
  pixel_color.z = 255 - clip(t*104.0f);
  pixel_color.w = 255;
}

__device__
void tail3(uchar4 &pixel_color, const float t) {
  // blue tail
  pixel_color.x = 255 - clip(t*104.0f);
  pixel_color.y = 255 - clip(t*104.0f);
  pixel_color.z = 255 - clip(30.2f*t*t);
  pixel_color.w = 255;
}

__device__
void tail4(uchar4 &pixel_color, const float t) {
  // yellow tail
  pixel_color.x = 255 - clip(30.2f*t*t);
  pixel_color.y = 255 - clip(30.2f*t*t);
  pixel_color.z = 255 - clip(t*104.0f);
  pixel_color.w = 255;
}

__device__
void tail_colors(uchar4 &pixel_color, const float t, int offset, const tail &curr_tail) {
  uchar4 temp;
  if (curr_tail.color == 0) return;
  switch (curr_tail.color) {
    case 1:
      tail1(temp, t - curr_tail.t_0);
      break;
    case 2:
      tail2(temp, t - curr_tail.t_0);
      break;
    case 3:
      tail3(temp, t - curr_tail.t_0);
      break;
    case 4:
      tail4(temp, t - curr_tail.t_0);
      break;
    default:
      break;
  }
  pixel_color.x = clip((int)pixel_color.x + (int)temp.x); 
  pixel_color.y = clip((int)pixel_color.y + (int)temp.y); 
  pixel_color.z = clip((int)pixel_color.z + (int)temp.z); 
  pixel_color.w = clip((int)pixel_color.w + (int)temp.w); 
}
