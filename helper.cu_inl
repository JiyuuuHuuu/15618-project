__device__
unsigned char clip(int n) { return n > 255 ? 255 : (n < 0 ? 0 : n); }

__device__
unsigned char clip(float n) { return n > 255.0f ? 255 : (n < 0.0f ? 0 : (unsigned char)n); }

__device__ __inline__ int
circleInBox(
  float circleX, float circleY, float circleRadius,
  float boxL, float boxR, float boxT, float boxB)
{
  // clamp circle center to box (finds the closest point on the box)
  float closestX = (circleX > boxL) ? ((circleX < boxR) ? circleX : boxR) : boxL;
  float closestY = (circleY > boxB) ? ((circleY < boxT) ? circleY : boxT) : boxB;

  // is circle radius less than the distance to the closest point on
  // the box?
  float distX = closestX - circleX;
  float distY = closestY - circleY;

  if ( ((distX*distX) + (distY*distY)) <= (circleRadius*circleRadius) ) {
    return 1;
  } else {
    return 0;
  }
}

__device__
int isWithinDistance(float2 p_0, float2 p_1, float d) {
  float distX = p_0.x - p_1.x;
  float distY = p_0.y - p_1.y;

  if (distX*distX + distY*distY <= d*d)
    return 1;
  else
    return 0;
}

__device__
float getDistance(float2 p_0, float2 p_1) {
  float distX = p_0.x - p_1.x;
  float distY = p_0.y - p_1.y;

  return sqrt(distX*distX + distY*distY);
}

__device__
float2 currP(float2 p_0, float2 v_0, float2 a, float t) {
  return p_0 + v_0*t + 1.0f/2.0f*a*t*t;
}

__device__
float currD(float d_0, float factor, float t) {
  return max(0.0f, d_0 - factor*t);
}

__device__
float random_float(float minVal, float maxVal, unsigned int &seed) {
  curandState s;
  curand_init(seed, 0, 0, &s);  // Initialize random number generator

  float randomFloat = curand_uniform(&s);  // Generate a random float between 0 and 1
  randomFloat = (randomFloat * (maxVal - minVal)) + minVal;  // Scale to desired range
  seed++;

  return randomFloat;
}

__device__
unsigned char random_char(unsigned char minVal, unsigned char maxVal, unsigned int &seed) {
  curandState s;
  curand_init(seed, 0, 0, &s);  // Initialize random number generator

  float randomFloat = curand_uniform(&s);  // Generate a random float between 0 and 1
  unsigned char randomUnsignedChar = static_cast<unsigned char>(randomFloat * (maxVal - minVal + 1)) + minVal;  // Scale to desired range
  seed++;

  return randomUnsignedChar;
}

__device__
float2 random_ring(float r, unsigned int &seed) {
  float minVal = -r;
  float maxVal = r;
  curandState s;
  curand_init(seed, 0, 0, &s);  // Initialize random number generator

  float randomFloat = curand_uniform(&s);  // Generate a random float between 0 and 1
  randomFloat = (randomFloat * (maxVal - minVal)) + minVal;  // Scale to desired range
  float temp = curand_uniform(&s);
  float sign = temp >= 0.5f ? 1.0f : -1.0f;
  seed++;

  float square = r * r - randomFloat * randomFloat;
  return make_float2(randomFloat, sign * sqrt(square));
}

__device__
float2 random_circle(float r, unsigned int &seed) {
  float2 ring = random_ring(r, seed);

  curandState s;
  curand_init(seed, 0, 0, &s);  // Initialize random number generator
  float randomFloat = curand_uniform(&s);
  seed++;

  return ring * randomFloat;
}

__device__
float2 random_sphere(float r, unsigned int &seed) {
  float u = random_float(0.0f, 1.0f, seed) * 2 * PI;
  float v = random_float(0.0f, 1.0f, seed) * PI;

  float2 ret = make_float2(cosf(u) * sinf(v), sinf(u) * sinf(v));
  return ret * r;
}

__device__
float2 random_heart(float x, unsigned int &seed) {
  float minVal = -1.57f;
  float maxVal = 1.57f;
  curandState s;
  curand_init(seed, 0, 0, &s);  // Initialize random number generator
  float randomFloat = curand_uniform(&s);
  randomFloat = (randomFloat * (maxVal - minVal)) + minVal;  // Scale to desired range

  // (0.64*sqrt(abs(x))-0.8+1.2^abs(x)*cos(200*x))*sqrt(cos(x))
  float tx = randomFloat;
  float ty = -(0.64 * sqrt(abs(tx)) - 0.8 + pow(1.2, abs(tx)) * cos(200*tx)) * sqrt(cos(tx));
  float scale = x / 1.57f;

  seed++;

  return make_float2(tx*scale, ty*scale);
}
