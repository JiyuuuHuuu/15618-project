// typedef void (*FuncPtr)(particle &, float2, float, int, unsigned int &);

__device__
void pattern0(particle &curr, const float2 p_0, const float t, int offset, unsigned int &seed) {
  // particle in a square with random color
  curr.p_0 = p_0;
  curr.v_0 = make_float2(
    random_float(-20.0f, 20.0f, seed),
    random_float(-20.0f, 20.0f, seed)
  );
  curr.a = make_float2(0.0f, G);
  curr.r = random_float(1.0f, 4.0f, seed);
  curr.t_0 = t+0.3;
  curr.explosion_height = random_float(3.0f, 6.0f, seed);
  curr.color = random_char(0, 3, seed);
}

__device__
void pattern1(particle &curr, const float2 p_0, const float t, int offset, unsigned int &seed) {
  // particle on ring with random color
  curr.p_0 = p_0;
  curr.v_0 = random_ring(30.0f, seed);
  curr.a = make_float2(0.0f, G);
  curr.r = random_float(1.5f, 2.5f, seed);
  curr.t_0 = t+0.3;
  curr.explosion_height = 5;
  curr.color = random_char(0, 3, seed);
}

__device__
void pattern2(particle &curr, const float2 p_0, const float t, int offset, unsigned int &seed) {
  // blinking particle in a sphere
  curr.p_0 = p_0;
  curr.v_0 = random_sphere(30.0f, seed);
  curr.a = make_float2(0.0f, G/2.0f);
  curr.r = random_float(1.5f, 2.5f, seed);
  curr.t_0 = t+0.3;
  curr.explosion_height = random_float(3.0f, 6.0f, seed);
  curr.color = random_char(20, 23, seed);
}

__device__
void pattern3(particle &curr, const float2 p_0, const float t, int offset, unsigned int &seed) {
  // particle in a sphere
  curr.p_0 = p_0;
  curr.v_0 = random_sphere(30.0f, seed);
  curr.a = make_float2(0.0f, G);
  curr.r = random_float(1.0f, 2.0f, seed);
  curr.t_0 = t+0.3;
  curr.explosion_height = 5;
  curr.color = random_char(0, 3, seed);
}

__device__
void pattern4(particle &curr, const float2 p_0, const float t, int offset, unsigned int &seed) {
  // random blinking particle in a sphere
  curr.p_0 = p_0;
  curr.v_0 = random_sphere(30.0f, seed);
  curr.a = make_float2(0.0f, G/3.0f);
  curr.r = random_float(1.0f, 4.0f, seed);
  curr.t_0 = t+0.3;
  curr.explosion_height = 5;
  curr.color = random_char(0, 2, seed);
  if (curr.color == 2) {
    curr.color = random_char(20, 23, seed);
    curr.t_0 += 3.0f;
    curr.explosion_height = random_float(1.0f, 3.0f, seed);
    curr.p_0 = p_0 + curr.v_0 * 2.5f;
    curr.v_0 = make_float2(0.0f, 0.0f);
  } else {
    curr.color = random_char(0, 2, seed);
  }
}

__device__
void pattern5(particle &curr, const float2 p_0, const float t, int offset, unsigned int &seed) {
  // heart
  curr.p_0 = p_0;
  curr.v_0 = random_heart(30.0f, seed);
  curr.a = make_float2(0.0f, G);
  curr.r = 2.0f;
  curr.t_0 = t+0.3;
  curr.explosion_height = 5;
  curr.color = random_char(0, 3, seed);
}

__device__
void pattern6(particle &curr, const float2 p_0, const float t, int offset, unsigned int &seed) {
  // particle in a circle with tail (random color)
  curr.p_0 = p_0;
  curr.v_0 = random_sphere(30.0f, seed);
  curr.a = make_float2(0.0f, G);
  curr.r = 1.0f;
  curr.t_0 = t+0.3;
  unsigned int temp = (unsigned int)(t * 1000.0f);
  curr.tail = random_char(1, 4, temp);
  curr.explosion_height = 5;
  curr.color = curr.tail + 39;
}

__device__
void pattern7(particle &curr, const float2 p_0, const float t, int offset, unsigned int &seed) {
  // red particle in a sphere with tail
  curr.p_0 = p_0;
  curr.v_0 = random_sphere(30.0f, seed);
  curr.a = make_float2(0.0f, G);
  curr.r = 1.0f;
  curr.t_0 = t+0.3;
  curr.tail = 1;
  curr.explosion_height = 5;
  curr.color = 40;
}

/*
__device__ FuncPtr patternArray[] = {
  pattern0,
  pattern1,
  pattern2,
  pattern3,
  pattern4,
  pattern5
};
*/

// need to register patterns in this function
__device__
void patterns(particle &curr, const float2 p_0, const float t, int offset, unsigned int &seed, int idx) {
  switch (idx) {
    case 0:
      pattern0(curr, p_0, t, offset, seed);
      break;
    case 1:
      pattern1(curr, p_0, t, offset, seed);
      break;
    case 2:
      pattern2(curr, p_0, t, offset, seed);
      break;
    case 3:
      pattern3(curr, p_0, t, offset, seed);
      break;
    case 4:
      pattern4(curr, p_0, t, offset, seed);
      break;
    case 5:
      pattern5(curr, p_0, t, offset, seed);
      break;
    case 6:
      pattern6(curr, p_0, t, offset, seed);
      break;
    case 7:
      pattern7(curr, p_0, t, offset, seed);
      break;
    default:
      pattern0(curr, p_0, t, offset, seed);
  }
}